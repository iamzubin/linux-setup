" -----------------------------------imports--------------------------------

call plug#begin('~/.vim/plugged')

Plug 'preservim/nerdtree'

Plug 't9md/vim-choosewin'

Plug 'scrooloose/syntastic'

Plug 'vim-airline/vim-airline'

Plug 'rafi/awesome-vim-colorschemes'


call plug#end()

" set clipboard
set clipboard^=unnamedplus,unnamed

" set cursor line
set cursorline


" set UTF-8 encoding
" set enc=utf-8
" set fenc=utf-8
" set termencoding=utf-8
" disable vi compatibility (emulation of old bugs)
set nocompatible
" use indentation of previous line
set autoindent
" use intelligent indentation for C
set smartindent
" configure tabwidth 
set tabstop=4        " tab width is 4 spaces
set shiftwidth=4     " indent also with 4 spaces
" set expandtab        " expand tabs to spaces
" turn syntax highlighting on
syntax on
" turn line numbers on
set number
" highlight matching braces
set showmatch
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */


" Install OmniCppComplete like described on http://vim.wikia.com/wiki/C++_code_completion
" This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
" Load standard tag files

" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/libevdev
set tags+=~/.vim/tags/libinput

" build tags of your own project with Ctrl-F12

"""
" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
set omnifunc=syntaxcomplete#Complete

" automatically open and close the popup menu / preview window
" au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
function! OpenCompletion()
    if !pumvisible() && ((v:char >= 'a' && v:char <= 'z') || (v:char >= 'A' && v:char <= 'Z'))
        call feedkeys("\<C-x>\<C-o>")
    endif
endfunction

autocmd InsertCharPre * call OpenCompletion()

set completeopt=menuone,menu,longest,preview

" Install DoxygenToolkit from http://www.vim.org/scripts/script.php?script_id=987
" let g:DoxygenToolkit_authorName="Zubin Choudhary <zchoudhary.10@gmail.com>"

" Mouse mode
set ttymouse=xterm2
set mouse=a

"  to clear search
nnoremap <silent> // :noh<CR>

" Enhanced keyboard mappings
"
" in normal mode F2 will save the file
nmap <F2> :w<CR>
" in insert mode F2 will exit insert, save, enters insert again
imap <F2> <ESC>:w<CR>i
" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
" recreate tags file with F5
" map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" custom script for c and c++ tags to run with deps
map <F5> :!ctags_with_dep.sh  $(find . -iregex '.*\.\(c\|cpp\|c++\|cc\)$') <CR>
" map <F5> :!ctags -R –c++-kinds=+p –fields=+iaS –extra=+q .<CR>
" create doxygen comment
" map <F6> :Dox<CR>
" build using makeprg with <F7>
map <F7> :make<CR>
map <F12> <C-]>

" Binding for choosewin
nmap  -  <Plug>(choosewin)
let g:choosewin_overlay_enable = 1

" nerdtree config
map ,t :NERDTreeToggle<CR>

colorscheme afterglow

hi Normal guibg=NONE ctermbg=NONE
